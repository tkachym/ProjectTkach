# A3 ‚Äì GLV-–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü—ñ—è —Å–∫–∞–ª—è—Ä–∞ Œ±

# –¶–µ–π –º–æ–¥—É–ª—å —Ä–µ–∞–ª—ñ–∑—É—î –ê–ª–≥–æ—Ä–∏—Ç–º 3.74 –∑ –∫–Ω–∏–≥–∏ [1]:
# 'Guide to Elliptic Curve Cryptography' (Hankerson, Menezes, Vanstone)

# –ú–µ—Ç–∞:
# –ó–Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è Œ± = Œ±‚ÇÅ + Œ±‚ÇÇŒª (mod q), –¥–µ:
# - Œ±‚ÇÅ, Œ±‚ÇÇ –º–∞—é—Ç—å –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≤–¥–≤—ñ—á—ñ –º–µ–Ω—à–∏–π –±—ñ—Ç–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä, –Ω—ñ–∂ Œ±
# - Œª ‚Äî –≤–ª–∞—Å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–Ω–¥–æ–º–æ—Ä—Ñ—ñ–∑–º—É œÜ, –∑–Ω–∞–π–¥–µ–Ω–µ —É A2
# - q ‚Äî –ø–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–∏ —Ç–æ—á–æ–∫ –Ω–∞ –∫—Ä–∏–≤—ñ–π E(ùîΩ‚Çö)

# –§–æ—Ä–º—É–ª–∞:
#     Œº = Œ± ‚ãÖ Œª / q
#     Œ±‚ÇÇ = round(Œº)
#     Œ±‚ÇÅ = Œ± ‚àí Œ±‚ÇÇ ‚ãÖ Œª (mod q)

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç–æ—á–Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ Decimal –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–æ—á–Ω–æ—Å—Ç—ñ.


from decimal import Decimal, getcontext

# –í–∏—Å–æ–∫–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥—Ä–æ–±–∞–º–∏
getcontext().prec = 200

# GLV-–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü—ñ—è: Œ± = Œ±‚ÇÅ + Œ±‚ÇÇŒª (mod q), –¥–µ Œ±, q, Œª ‚àà ‚Ñ§
def glv_decompose(alpha, q, lam):
    mu = Decimal(alpha) * Decimal(lam) / Decimal(q)
    alpha2 = int(mu.to_integral_value(rounding='ROUND_HALF_EVEN'))
    alpha1 = (alpha - alpha2 * lam) % q

    if alpha1 > q // 2:
        alpha1 -= q
    if alpha2 > q // 2:
        alpha2 -= q

    return alpha1, alpha2

# –ü—Ä–∏–∫–ª–∞–¥:
q = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
lambda_val = 21888242871839275217838484774961031246154997185409878258781734729429964517155
alpha = 1234567890123456789012345678901234567890

a1, a2 = glv_decompose(alpha, q, lambda_val)
print("Œ±‚ÇÅ =", a1)
print("Œ±‚ÇÇ =", a2)
