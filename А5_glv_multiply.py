# A5 ‚Äì –ü–æ–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è GLV-–º–Ω–æ–∂–µ–Ω–Ω—è

## –ú–µ—Ç–∞: –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º GLV-–º–Ω–æ–∂–µ–Ω–Ω—è [Œ±]P=[Œ±‚ÇÅ]P+[Œ±‚ÇÇ]œÜ(P),
#        —è–∫–∏–π —à–≤–∏–¥—à–∏–π –∑–∞ –∫–ª–∞—Å–∏—á–Ω–µ —Å–∫–∞–ª—è—Ä–Ω–µ –º–Ω–æ–∂–µ–Ω–Ω—è —Ç–æ—á–∫–∏ –Ω–∞ –∫—Ä–∏–≤—ñ–π E(ùîΩ‚Çö).

## –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
#    - œâ ‚Äì –Ω–µ—Ç—Ä–∏–≤—ñ–∞–ª—å–Ω–∏–π –∫—É–±—ñ—á–Ω–∏–π –∫–æ—Ä—ñ–Ω—å –∑ 1 (–∑ A1)
#    - Œª ‚Äì –≤–ª–∞—Å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–Ω–¥–æ–º–æ—Ä—Ñ—ñ–∑–º—É œÜ (–∑ A2)
#    - GLV-–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü—ñ—è Œ± (–∑ A3)
#    - œÜ(P) = (œâx, y) (–∑ A2)
#    - [Œ±‚ÇÅ]P + [Œ±‚ÇÇ]œÜ(P) ‚Äì –º–µ—Ç–æ–¥ –®–∞–º—ñ—Ä–∞ (–∑ A4)

## –ê–ª–≥–æ—Ä–∏—Ç–º
# 1. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ `glv_decompose(Œ±)` ‚Üí Œ±‚ÇÅ, Œ±‚ÇÇ
# 2. –û–±—á–∏—Å–ª–∏—Ç–∏ œÜ(P)
# 3. –û–±—á–∏—Å–ª–∏—Ç–∏ `shamir_trick(Œ±‚ÇÅ, P, Œ±‚ÇÇ, œÜ(P))`

## –†–µ–∑—É–ª—å—Ç–∞—Ç
# –§–∞–π–ª `glv_multiply.py` —Ä–µ–∞–ª—ñ–∑—É—î:
# - –ø–æ–≤–Ω–µ –º–Ω–æ–∂–µ–Ω–Ω—è [Œ±]P —á–µ—Ä–µ–∑ GLV
# - –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –∫–ª–∞—Å–∏—á–Ω–∏–º scalar_mult
# - –≤–∏–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–±—ñ–≥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤


from decimal import Decimal, getcontext
import time

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫—Ä–∏–≤–æ—ó BN254
p = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
q = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
omega = 21888242871839275220042445260109153167277707414472061641714758635765020556616
lambda_val = 21888242871839275217838484774961031246154997185409878258781734729429964517155

getcontext().prec = 200

def point_add(P, Q):
    if P is None: return Q
    if Q is None: return P
    x1, y1 = P
    x2, y2 = Q
    if x1 == x2 and y1 != y2: return None
    if P == Q:
        m = (3 * x1 * x1) * pow(2 * y1, -1, p) % p
    else:
        m = (y2 - y1) * pow(x2 - x1, -1, p) % p
    x3 = (m * m - x1 - x2) % p
    y3 = (m * (x1 - x3) - y1) % p
    return (x3, y3)

def negate_point(P):
    if P is None: return None
    x, y = P
    return (x, (-y) % p)

def scalar_mult(k, P):
    R = None
    if k < 0:
        k = -k
        P = negate_point(P)
    while k:
        if k & 1:
            R = point_add(R, P)
        P = point_add(P, P)
        k >>= 1
    return R

def phi(P):
    x, y = P
    return (omega * x % p, y)

def glv_decompose(alpha):
    mu = Decimal(alpha) * Decimal(lambda_val) / Decimal(q)
    alpha2 = int(mu.to_integral_value(rounding='ROUND_HALF_EVEN'))
    alpha1 = (alpha - alpha2 * lambda_val) % q
    if alpha1 > q // 2: alpha1 -= q
    if alpha2 > q // 2: alpha2 -= q
    return alpha1, alpha2

def shamir_trick(k1, P1, k2, P2):
    if k1 < 0: k1, P1 = -k1, negate_point(P1)
    if k2 < 0: k2, P2 = -k2, negate_point(P2)
    table = {
        (0, 0): None,
        (0, 1): P2,
        (1, 0): P1,
        (1, 1): point_add(P1, P2)
    }
    R = None
    bin1 = bin(k1)[2:].zfill(max(len(bin(k1)), len(bin(k2))))
    bin2 = bin(k2)[2:].zfill(len(bin1))
    for b1, b2 in zip(bin1, bin2):
        R = point_add(R, R)
        T = table[(int(b1), int(b2))]
        if T: R = point_add(R, T)
    return R

def glv_multiply(alpha, P):
    a1, a2 = glv_decompose(alpha)
    P2 = phi(P)

    # –í–∏–º—ñ—Ä—é—î–º–æ –ª–∏—à–µ —á–∞—Å –º–Ω–æ–∂–µ–Ω–Ω—è
    start = time.time()
    R = shamir_trick(a1, P, a2, P2)
    elapsed = time.time() - start
    return R, elapsed

# –¢–µ—Å—Ç
P = (1, 2)
alpha = 1234567890123456789012345678901234567890

# –ß–∞—Å –∫–ª–∞—Å–∏—á–Ω–æ–≥–æ –º–Ω–æ–∂–µ–Ω–Ω—è
start_classic = time.time()
R_classic = scalar_mult(alpha, P)
elapsed_classic = time.time() - start_classic

# –ß–∞—Å GLV –º–Ω–æ–∂–µ–Ω–Ω—è
R_glv, elapsed_glv = glv_multiply(alpha, P)

print("–ö–ª–∞—Å–∏—á–Ω–µ –º–Ω–æ–∂–µ–Ω–Ω—è:", R_classic)
print("GLV –º–Ω–æ–∂–µ–Ω–Ω—è     :", R_glv)
print("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è:", R_classic == R_glv)
print(f"–ß–∞—Å –∫–ª–∞—Å–∏—á–Ω–æ–≥–æ –º–Ω–æ–∂–µ–Ω–Ω—è: {elapsed_classic:.6f} —Å–µ–∫—É–Ω–¥")
print(f"–ß–∞—Å GLV –º–Ω–æ–∂–µ–Ω–Ω—è       : {elapsed_glv:.6f} —Å–µ–∫—É–Ω–¥")
