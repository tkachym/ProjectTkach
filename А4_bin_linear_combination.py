# A4: –ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è [Œ±‚ÇÅ]P‚ÇÅ+[Œ±‚ÇÇ]P‚ÇÇ (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ê–ª–≥–æ—Ä–∏—Ç–º—É 3.48 - Shamir‚Äôs Trick)

## –ú–µ—Ç–∞: —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è [Œ±‚ÇÅ]P‚ÇÅ+[Œ±‚ÇÇ]P‚ÇÇ
# —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ GLV-–º–Ω–æ–∂–µ–Ω–Ω—è, –¥–µ:
#    - P‚ÇÅ = P
#    - P‚ÇÇ = œÜ(P)
#     - Œ±‚ÇÅ, Œ±‚ÇÇ ‚Äî –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ GLV-–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó (A3)

## –ú–µ—Ç–æ–¥
# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –ê–ª–≥–æ—Ä–∏—Ç–º 3.48 –∑ –∫–Ω–∏–≥–∏ [1] (Hankerson, Menezes, Vanstone), —Ç–∞–∫–æ–∂ –≤—ñ–¥–æ–º–∏–π —è–∫ –º–µ—Ç–æ–¥ –®–∞–º—ñ—Ä–∞ (Shamir‚Äôs Trick).

### –û—Å–Ω–æ–≤–Ω–∞ —ñ–¥–µ—è:
# - –ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–ª—è 4 –º–æ–∂–ª–∏–≤–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –±—ñ—Ç—ñ–≤:
#     (0,0) ‚Üí ùí™  
#     (0,1) ‚Üí P‚ÇÇ  
#     (1,0) ‚Üí P‚ÇÅ  
#     (1,1) ‚Üí P‚ÇÅ + P‚ÇÇ
# - –î–∞–ª—ñ, –ø–æ–±—ñ—Ç–Ω–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –¥–≤—ñ–π–∫–æ–≤—ñ –ø–æ–¥–∞–Ω–Ω—è Œ±‚ÇÅ —Ç–∞ Œ±‚ÇÇ.

## –†–µ–∑—É–ª—å—Ç–∞—Ç
# –ú–æ–¥—É–ª—å `shamir_trick.py` –æ–±—á–∏—Å–ª—é—î [Œ±‚ÇÅ]P+[Œ±‚ÇÇ]œÜ(P) –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ, –Ω—ñ–∂ –æ–∫—Ä–µ–º–µ –º–Ω–æ–∂–µ–Ω–Ω—è –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º.


p = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b = 3

def point_add(P, Q):
    if P is None: return Q
    if Q is None: return P
    x1, y1 = P
    x2, y2 = Q
    if x1 == x2 and y1 != y2:
        return None
    if P == Q:
        m = (3 * x1 * x1) * pow(2 * y1, -1, p) % p
    else:
        m = (y2 - y1) * pow(x2 - x1, -1, p) % p
    x3 = (m * m - x1 - x2) % p
    y3 = (m * (x1 - x3) - y1) % p
    return (x3, y3)

def negate_point(P):
    if P is None: return None
    x, y = P
    return (x, (-y) % p)

def shamir_trick(k1, P1, k2, P2):
    if k1 < 0:
        k1 = -k1
        P1 = negate_point(P1)
    if k2 < 0:
        k2 = -k2
        P2 = negate_point(P2)

    # –ü–æ–±—É–¥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ
    table = {
        (0, 0): None,
        (0, 1): P2,
        (1, 0): P1,
        (1, 1): point_add(P1, P2)
    }

    R = None
    bin1 = bin(k1)[2:].zfill(max(len(bin(k1)), len(bin(k2))))
    bin2 = bin(k2)[2:].zfill(len(bin1))

    for b1, b2 in zip(bin1, bin2):
        R = point_add(R, R)
        T = table[(int(b1), int(b2))]
        if T:
            R = point_add(R, T)
    return R

# –ü—Ä–∏–∫–ª–∞–¥
P = (1, 2)
omega = 21888242871839275220042445260109153167277707414472061641714758635765020556616
phiP = (omega * P[0] % p, P[1])

alpha1 = -8373803423573080002309799091858454828798290858057793217301015255930102072719
alpha2 = 1234567890123456788763724639560935449249

R = shamir_trick(alpha1, P, alpha2, phiP)
print("–†–µ–∑—É–ª—å—Ç–∞—Ç [Œ±‚ÇÅ]P + [Œ±‚ÇÇ]œÜ(P):", R)
